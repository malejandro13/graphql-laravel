input LoginInput {
    username: String! @rules(apply: ["required"])
    password: String! @rules(apply: ["required"])
}


input RefreshTokenInput {
    refresh_token: String
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    jobs: [Job!]! @hasMany(type: "paginator", defaultCount: 10)
    tasks: [Task!]! @belongsToMany(type: "paginator", defaultCount: 10)
}

type AuthPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
    user: User!
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required", "email"])
}

input NewPasswordWithCodeInput {
    email: String! @rules(apply: ["required", "email"])
    token: String! @rules(apply: ["required", "string"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input RegisterInput {
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

extend type Query @middleware(checks: ["auth:api"]) {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
}

extend type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "App\\GraphQL\\Mutations\\Auth\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "App\\GraphQL\\Mutations\\Auth\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "App\\GraphQL\\Mutations\\Auth\\ResetPassword@resolve")
    register(input: RegisterInput @spread): AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\Auth\\Register@resolve")
}
